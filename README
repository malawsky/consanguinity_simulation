The following R code was used to produce simulated genotype data given a consanguineous scheme in Arciero et al, Nature Communication: https://www.nature.com/articles/s41467-021-27394-2#Sec27.


#### how to run

input:
The input is a ped and bim file in PLINK format. 
The bim file should include the genetic distance in cM. Program should only be run on one chromosome at a time.

output:
The output is a bed file in PLINK format with simulated genotypes for a given consanguineous scheme.

###running the code 

Run the code in the R script file simulation.R 

The following command is an example of how to run the simulation:
consang_cous(path/to/bim,path/to/ped,n,i,"output_prefix")

n is the number of simulated individual to generate (must be the appropriate multiple for a given function listed below and less than or equal to the number of samples in the bed file).
i is the chromosome number

n should be a multiple of:
2 for siblings consang_sib()
5 for avuncular third generation consang_avan3rddgen()
4 for avuncular second generation consang_avan2nddgen()
3 for avuncular first generation consang_avan()
8 for first cousin first third generation consang_cous_3gen()
6 for first cousin first second generation consang_cous_2gen()
4 for first cousin first generation consang_cous()
5 for first cousin once removed consang_cousremoved()
6 for second cousins consang_secondcous()
2 for unrelated consang_outbred()

####Tips

1. Remember to split up the file into chromosomes!
2. Only include unrelated individuals from your dataset for the simulations (you can include everyone for the prediction step).
3. Don't load a lot of samples into R. Using ~500 individuals for each category is sufficient for model training.

###Following running the simulations, we recommend the following steps:

1. Call ROHs using PLINK and convert base position to genetic distance 
2. For each simulated individual gather 16 statistics, the number of ROHs an individual has in bins of 10 cM starting at a minimumm of 10 cM up to 150 cM, e.g 10-20,20-30,...,140-150 and label the 
data with the appropriate parental realtedness cateogry.
3. Use the package nnet in R to train a neural network:
mynn <- nnet(parental_relatedness ~ ., data=trainset,
  size=25, decay=1.0e-5, maxit=500000,trace=F)
  where trainset has 17 columns, the 16 statistics and a parental_relatedness category with the parental relatedness scheme used to simulate each individual.
  We have found that multilayer architectures don't enhance performance, but if you find an implementation that improves on the accuracy we report, please email me!
4. Follow the same steps for your real data, and use the trained model to predict the parental relatedness for each individual:
prediction <- predict(mynn, actual_data, type="raw")
5. Repeat the training and prediction steps ten times or more, sum up the matrices, and choose for each individual the parental realtedness category with the largest sum.
  
  
  
